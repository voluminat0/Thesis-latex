\BOOKMARK [0][-]{chapter.1}{Introduction}{}% 1
\BOOKMARK [1][-]{section.1.1}{Objectives and contributions}{chapter.1}% 2
\BOOKMARK [1][-]{section.1.2}{Overview}{chapter.1}% 3
\BOOKMARK [0][-]{chapter.2}{Detecting security vulnerabilities}{}% 4
\BOOKMARK [1][-]{section.2.1}{Introduction to static analysis}{chapter.2}% 5
\BOOKMARK [2][-]{subsection.2.1.1}{Abstract interpretation}{section.2.1}% 6
\BOOKMARK [2][-]{subsection.2.1.2}{Mathematical background}{section.2.1}% 7
\BOOKMARK [2][-]{subsection.2.1.3}{Abstraction}{section.2.1}% 8
\BOOKMARK [1][-]{section.2.2}{Support for generic vulnerabilities}{chapter.2}% 9
\BOOKMARK [2][-]{subsection.2.2.1}{Limitations}{section.2.2}% 10
\BOOKMARK [2][-]{subsection.2.2.2}{Existing analysis tools}{section.2.2}% 11
\BOOKMARK [1][-]{section.2.3}{Support for application-specific vulnerabilities}{chapter.2}% 12
\BOOKMARK [1][-]{section.2.4}{Conclusion}{chapter.2}% 13
\BOOKMARK [0][-]{chapter.3}{Overview of the approach}{}% 14
\BOOKMARK [1][-]{section.3.1}{Architecture}{chapter.3}% 15
\BOOKMARK [1][-]{section.3.2}{Flow graphs for JavaScript programs}{chapter.3}% 16
\BOOKMARK [2][-]{subsection.3.2.1}{Information in an abstract state graph}{section.3.2}% 17
\BOOKMARK [2][-]{subsection.3.2.2}{States of an abstract state graph}{section.3.2}% 18
\BOOKMARK [2][-]{subsection.3.2.3}{Attributes of the states}{section.3.2}% 19
\BOOKMARK [1][-]{section.3.3}{DSLs for querying graphs}{chapter.3}% 20
\BOOKMARK [1][-]{section.3.4}{Design of an internal DSL for querying flow graphs}{chapter.3}% 21
\BOOKMARK [2][-]{subsection.3.4.1}{Internal DSL design constraints}{section.3.4}% 22
\BOOKMARK [2][-]{subsection.3.4.2}{DSL implementation techniques and patterns}{section.3.4}% 23
\BOOKMARK [1][-]{section.3.5}{Existing DSL approaches for querying graphs}{chapter.3}% 24
\BOOKMARK [2][-]{subsection.3.5.1}{External DSLs}{section.3.5}% 25
\BOOKMARK [2][-]{subsection.3.5.2}{Internal DSLs}{section.3.5}% 26
\BOOKMARK [1][-]{section.3.6}{Conclusion}{chapter.3}% 27
\BOOKMARK [0][-]{chapter.4}{JS-QL: An internal DSL approach for querying flow graphs}{}% 28
\BOOKMARK [1][-]{section.4.1}{The JS-QL query language}{chapter.4}% 29
\BOOKMARK [2][-]{subsection.4.1.1}{The entry point}{section.4.1}% 30
\BOOKMARK [2][-]{subsection.4.1.2}{State}{section.4.1}% 31
\BOOKMARK [2][-]{subsection.4.1.3}{Wildcard}{section.4.1}% 32
\BOOKMARK [2][-]{subsection.4.1.4}{Disjunction}{section.4.1}% 33
\BOOKMARK [2][-]{subsection.4.1.5}{Referring to the current object}{section.4.1}% 34
\BOOKMARK [2][-]{subsection.4.1.6}{Specifying additional properties}{section.4.1}% 35
\BOOKMARK [2][-]{subsection.4.1.7}{Filtering states}{section.4.1}% 36
\BOOKMARK [2][-]{subsection.4.1.8}{Data flow in JS-QL}{section.4.1}% 37
\BOOKMARK [2][-]{subsection.4.1.9}{Negation}{section.4.1}% 38
\BOOKMARK [1][-]{section.4.2}{Types of queries}{chapter.4}% 39
\BOOKMARK [2][-]{subsection.4.2.1}{Existential queries}{section.4.2}% 40
\BOOKMARK [2][-]{subsection.4.2.2}{Universal queries}{section.4.2}% 41
\BOOKMARK [2][-]{subsection.4.2.3}{Query direction}{section.4.2}% 42
\BOOKMARK [1][-]{section.4.3}{Defining predicates and policies}{chapter.4}% 43
\BOOKMARK [2][-]{subsection.4.3.1}{Creating a predicate}{section.4.3}% 44
\BOOKMARK [2][-]{subsection.4.3.2}{Recursion}{section.4.3}% 45
\BOOKMARK [1][-]{section.4.4}{Conclusion}{chapter.4}% 46
\BOOKMARK [0][-]{chapter.5}{Implementation}{}% 47
\BOOKMARK [1][-]{section.5.1}{Architecture}{chapter.5}% 48
\BOOKMARK [1][-]{section.5.2}{User interface}{chapter.5}% 49
\BOOKMARK [1][-]{section.5.3}{The query language}{chapter.5}% 50
\BOOKMARK [1][-]{section.5.4}{Matching engine}{chapter.5}% 51
\BOOKMARK [2][-]{subsection.5.4.1}{Inputs and output}{section.5.4}% 52
\BOOKMARK [2][-]{subsection.5.4.2}{Query algorithms}{section.5.4}% 53
\BOOKMARK [2][-]{subsection.5.4.3}{Matching states with a pattern}{section.5.4}% 54
\BOOKMARK [2][-]{subsection.5.4.4}{Merging substitution results}{section.5.4}% 55
\BOOKMARK [2][-]{subsection.5.4.5}{Processing subgraphs}{section.5.4}% 56
\BOOKMARK [1][-]{section.5.5}{Conclusion}{chapter.5}% 57
\BOOKMARK [0][-]{chapter.6}{Evaluation}{}% 58
\BOOKMARK [1][-]{section.6.1}{The GateKeeper language}{chapter.6}% 59
\BOOKMARK [2][-]{subsection.6.1.1}{Writes to prototype objects}{section.6.1}% 60
\BOOKMARK [2][-]{subsection.6.1.2}{Global namespace pollution}{section.6.1}% 61
\BOOKMARK [2][-]{subsection.6.1.3}{Script inclusions}{section.6.1}% 62
\BOOKMARK [2][-]{subsection.6.1.4}{Conclusion}{section.6.1}% 63
\BOOKMARK [1][-]{section.6.2}{The PidginQL language}{chapter.6}% 64
\BOOKMARK [2][-]{subsection.6.2.1}{Only CMS administrators can send a message to all CMS users}{section.6.2}% 65
\BOOKMARK [2][-]{subsection.6.2.2}{Public outputs do not depend on a user's password, unless it has been cryptographically hashed}{section.6.2}% 66
\BOOKMARK [2][-]{subsection.6.2.3}{A database is opened only after the master password is checked or when creating a new database}{section.6.2}% 67
\BOOKMARK [2][-]{subsection.6.2.4}{Conclusion}{section.6.2}% 68
\BOOKMARK [1][-]{section.6.3}{The ConScript language}{chapter.6}% 69
\BOOKMARK [2][-]{subsection.6.3.1}{No string arguments to setInterval, setTimeout}{section.6.3}% 70
\BOOKMARK [2][-]{subsection.6.3.2}{HTTP-cookies only}{section.6.3}% 71
\BOOKMARK [2][-]{subsection.6.3.3}{Prevent resource abuse}{section.6.3}% 72
\BOOKMARK [2][-]{subsection.6.3.4}{Conclusion}{section.6.3}% 73
\BOOKMARK [1][-]{section.6.4}{Evaluation}{chapter.6}% 74
\BOOKMARK [2][-]{subsection.6.4.1}{Advantages}{section.6.4}% 75
\BOOKMARK [2][-]{subsection.6.4.2}{Limitations}{section.6.4}% 76
\BOOKMARK [2][-]{subsection.6.4.3}{Conclusion}{section.6.4}% 77
\BOOKMARK [0][-]{chapter.7}{Conclusion and future work}{}% 78
\BOOKMARK [1][-]{section.7.1}{Technical limitations of the approach}{chapter.7}% 79
\BOOKMARK [1][-]{section.7.2}{Future research}{chapter.7}% 80
\BOOKMARK [1][-]{section.7.3}{Concluding remarks}{chapter.7}% 81
\BOOKMARK [0][-]{section*.142}{Appendices}{}% 82
\BOOKMARK [0][-]{Appendix.a.A}{JS-QL policies and predicates}{}% 83
