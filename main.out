\BOOKMARK [0][-]{chapter.1}{Introduction}{}% 1
\BOOKMARK [1][-]{section.1.1}{Motivation}{chapter.1}% 2
\BOOKMARK [1][-]{section.1.2}{Objective}{chapter.1}% 3
\BOOKMARK [1][-]{section.1.3}{Overview}{chapter.1}% 4
\BOOKMARK [0][-]{chapter.2}{Detecting security vulnerabilities}{}% 5
\BOOKMARK [1][-]{section.2.1}{Introduction to static analysis}{chapter.2}% 6
\BOOKMARK [1][-]{section.2.2}{Support for generic vulnerabilities}{chapter.2}% 7
\BOOKMARK [1][-]{section.2.3}{Support for application-specific vulnerabilities}{chapter.2}% 8
\BOOKMARK [1][-]{section.2.4}{Conclusion}{chapter.2}% 9
\BOOKMARK [0][-]{chapter.3}{Overview of the approach}{}% 10
\BOOKMARK [1][-]{section.3.1}{Architecture}{chapter.3}% 11
\BOOKMARK [1][-]{section.3.2}{Flow graphs for JavaScript programs}{chapter.3}% 12
\BOOKMARK [1][-]{section.3.3}{External DSLs for querying graphs}{chapter.3}% 13
\BOOKMARK [2][-]{subsection.3.3.1}{Domain-specific language vs. general purpose language}{section.3.3}% 14
\BOOKMARK [2][-]{subsection.3.3.2}{External DSLs}{section.3.3}% 15
\BOOKMARK [2][-]{subsection.3.3.3}{Internal DSLs}{section.3.3}% 16
\BOOKMARK [1][-]{section.3.4}{Design of an internal DSL for querying flow graphs}{chapter.3}% 17
\BOOKMARK [2][-]{subsection.3.4.1}{Internal DSL design constraints}{section.3.4}% 18
\BOOKMARK [2][-]{subsection.3.4.2}{DSL implementation techniques and patterns}{section.3.4}% 19
\BOOKMARK [0][-]{chapter.4}{JS-QL: an internal DSL approach for querying flow graphs}{}% 20
\BOOKMARK [1][-]{section.4.1}{Syntax and structure}{chapter.4}% 21
\BOOKMARK [1][-]{section.4.2}{Types of queries}{chapter.4}% 22
\BOOKMARK [1][-]{section.4.3}{Defining policies}{chapter.4}% 23
\BOOKMARK [1][-]{section.4.4}{The matching engine}{chapter.4}% 24
\BOOKMARK [0][-]{chapter.5}{Implementation}{}% 25
\BOOKMARK [1][-]{section.5.1}{Used technologies}{chapter.5}% 26
\BOOKMARK [1][-]{section.5.2}{Design of the query language}{chapter.5}% 27
\BOOKMARK [1][-]{section.5.3}{Design of the matching engine}{chapter.5}% 28
\BOOKMARK [1][-]{section.5.4}{Conclusion}{chapter.5}% 29
\BOOKMARK [0][-]{chapter.6}{Evaluation}{}% 30
\BOOKMARK [1][-]{section.6.1}{The GateKeeper language}{chapter.6}% 31
\BOOKMARK [2][-]{subsection.6.1.1}{Writes to prototype objects}{section.6.1}% 32
\BOOKMARK [2][-]{subsection.6.1.2}{Global namespace pollution}{section.6.1}% 33
\BOOKMARK [2][-]{subsection.6.1.3}{Script inclusions}{section.6.1}% 34
\BOOKMARK [2][-]{subsection.6.1.4}{Conclusion}{section.6.1}% 35
\BOOKMARK [1][-]{section.6.2}{The PidginQL language}{chapter.6}% 36
\BOOKMARK [2][-]{subsection.6.2.1}{Only CMS administrators can send a message to all CMS users}{section.6.2}% 37
\BOOKMARK [2][-]{subsection.6.2.2}{Public outputs do not depend on a user's password, unless it has been cryptographically hashed}{section.6.2}% 38
\BOOKMARK [2][-]{subsection.6.2.3}{A database is opened only after the master password is checked or when creating a new database}{section.6.2}% 39
\BOOKMARK [2][-]{subsection.6.2.4}{Conclusion}{section.6.2}% 40
\BOOKMARK [1][-]{section.6.3}{The ConScript language}{chapter.6}% 41
\BOOKMARK [2][-]{subsection.6.3.1}{No string arguments to setInterval, setTimeout}{section.6.3}% 42
\BOOKMARK [2][-]{subsection.6.3.2}{HTTP-cookies only}{section.6.3}% 43
\BOOKMARK [2][-]{subsection.6.3.3}{Prevent resource abuse}{section.6.3}% 44
\BOOKMARK [2][-]{subsection.6.3.4}{Conclusion}{section.6.3}% 45
\BOOKMARK [1][-]{section.6.4}{Evaluation}{chapter.6}% 46
\BOOKMARK [2][-]{subsection.6.4.1}{Advantages}{section.6.4}% 47
\BOOKMARK [2][-]{subsection.6.4.2}{Limitations}{section.6.4}% 48
\BOOKMARK [2][-]{subsection.6.4.3}{Conclusion}{section.6.4}% 49
\BOOKMARK [0][-]{chapter.7}{Conclusion and future work}{}% 50
\BOOKMARK [1][-]{section.7.1}{Summary}{chapter.7}% 51
\BOOKMARK [1][-]{section.7.2}{Future work}{chapter.7}% 52
\BOOKMARK [0][-]{section*.23}{Appendices}{}% 53
\BOOKMARK [0][-]{Appendix.a.A}{Compound Policies}{}% 54
